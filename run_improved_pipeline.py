"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ pipeline –∑ —É—Å—ñ–º–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏
–í–∫–ª—é—á–∞—î: feature engineering, ensemble training, meta-models, evaluation
"""

import argparse
import glob
import os
import subprocess
import sys
from datetime import datetime


def run_cmd(args: list[str], description: str = ""):
    """–í–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*80}")
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {description}")
    print(f"{'='*80}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(args)}\n")

    try:
        result = subprocess.run(args, check=True, text=True, capture_output=False)
        print(f"\n‚úÖ [OK] {description}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå [ERROR] {description} failed with code {e.returncode}")
        return False


def main():
    parser = argparse.ArgumentParser(
        description="–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ pipeline –¥–ª—è Forex LSTM"
    )

    # Pipeline options
    parser.add_argument(
        "--skip-fetch",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ MT5 (—è–∫—â–æ –¥–∞–Ω—ñ –≤–∂–µ —î)"
    )
    parser.add_argument(
        "--skip-history",
        action="store_true",
        help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ (–¥–æ–≤–≥–∏–π –ø—Ä–æ—Ü–µ—Å)"
    )
    parser.add_argument(
        "--model-type",
        default="ensemble",
        choices=["lstm", "gru", "attention", "ensemble"],
        help="–¢–∏–ø –º–æ–¥–µ–ª—ñ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è (ensemble = –≤—Å—ñ —Ç—Ä–∏ —Ç–∏–ø–∏)"
    )
    parser.add_argument(
        "--meta-ensemble",
        action="store_true",
        help="–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ LightGBM + XGBoost ensemble –¥–ª—è meta-–º–æ–¥–µ–ª—ñ"
    )
    parser.add_argument(
        "--cv-folds",
        type=int,
        default=5,
        help="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ–ª–¥—ñ–≤ –¥–ª—è time-series cross-validation (0 = –≤–∏–º–∫–Ω—É—Ç–∏)"
    )
    parser.add_argument(
        "--no-augment",
        action="store_true",
        help="–í–∏–º–∫–Ω—É—Ç–∏ data augmentation"
    )
    parser.add_argument(
        "--no-focal-loss",
        action="store_true",
        help="–í–∏–º–∫–Ω—É—Ç–∏ focal loss (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π categorical crossentropy)"
    )
    parser.add_argument(
        "--history-days",
        type=int,
        default=365,
        help="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"
    )
    parser.add_argument(
        "--fast-mode",
        action="store_true",
        help="–®–≤–∏–¥–∫–∏–π —Ä–µ–∂–∏–º: GRU, –±–µ–∑ augmentation, –±–µ–∑ history, –±–µ–∑ CV"
    )

    args = parser.parse_args()

    # Fast mode shortcuts
    if args.fast_mode:
        print("\nüöÄ FAST MODE ENABLED")
        args.model_type = "gru"
        args.no_augment = True
        args.skip_history = True
        args.cv_folds = 0
        print("   - Model: GRU (faster than LSTM)")
        print("   - Data augmentation: DISABLED")
        print("   - Historical generation: SKIPPED")
        print("   - Cross-validation: DISABLED\n")

    config_file = "config.yaml"
    success_count = 0
    total_steps = 0

    print("\n" + "="*80)
    print("üöÄ FOREX LSTM –ü–û–ö–†–ê–©–ï–ù–ò–ô PIPELINE")
    print("="*80)
    print(f"–ß–∞—Å –ø–æ—á–∞—Ç–∫—É: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–¢–∏–ø –º–æ–¥–µ–ª—ñ: {args.model_type}")
    print(f"Meta-ensemble: {'–¢–ê–ö' if args.meta_ensemble else '–ù–Ü'}")
    print(f"Data augmentation: {'–ù–Ü' if args.no_augment else '–¢–ê–ö'}")
    print(f"Focal loss: {'–ù–Ü' if args.no_focal_loss else '–¢–ê–ö'}")
    print(f"Cross-validation folds: {args.cv_folds}")
    print("="*80 + "\n")

    # STEP 1: Fetch MT5 Data
    if not args.skip_fetch:
        total_steps += 1
        if run_cmd(
            [sys.executable, "scripts/fetch_mt5.py", "--config", config_file],
            "–ö–†–û–ö 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ MetaTrader 5"
        ):
            success_count += 1
    else:
        print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ MT5")

    # STEP 2: Create Dataset with Walk-Forward Validation
    total_steps += 1
    if run_cmd(
        [sys.executable, "scripts/make_dataset.py", "--config", config_file, "--walk-forward"],
        "–ö–†–û–ö 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è dataset –∑ walk-forward validation —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ features"
    ):
        success_count += 1

    # STEP 3: Train Models
    total_steps += 1
    train_cmd = [sys.executable, "scripts/train_lstm.py", "--config", config_file]

    if args.model_type == "ensemble":
        train_cmd.append("--ensemble")
        description = "–ö–†–û–ö 3: –ù–∞–≤—á–∞–Ω–Ω—è ENSEMBLE –º–æ–¥–µ–ª–µ–π (LSTM + GRU + Attention)"
    else:
        train_cmd.extend(["--model-type", args.model_type])
        description = f"–ö–†–û–ö 3: –ù–∞–≤—á–∞–Ω–Ω—è {args.model_type.upper()} –º–æ–¥–µ–ª—ñ"

    if args.no_augment:
        train_cmd.append("--no-augment")

    if args.no_focal_loss:
        train_cmd.append("--no-focal-loss")

    if run_cmd(train_cmd, description):
        success_count += 1

    # STEP 4: Generate Base Signals
    total_steps += 1
    if run_cmd(
        [sys.executable, "scripts/infer_signals.py", "--config", config_file, "--out", "outputs/signals.json"],
        "–ö–†–û–ö 4: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö —Ç–æ—Ä–≥–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤"
    ):
        success_count += 1

    # STEP 5: Historical Signal Generation (Optional)
    if not args.skip_history:
        total_steps += 1
        if run_cmd(
            [sys.executable, "historical_generator.py", "--config", config_file, "--days", str(args.history_days)],
            f"–ö–†–û–ö 5: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ ({args.history_days} –¥–Ω—ñ–≤)"
        ):
            success_count += 1
    else:
        print("\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤")

    # STEP 6: Label Generation
    if not args.skip_history:
        total_steps += 1
        if run_cmd(
            [sys.executable, "label_generator.py"],
            "–ö–†–û–ö 6: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è labeled dataset –¥–ª—è meta-–º–æ–¥–µ–ª—ñ"
        ):
            success_count += 1

    # STEP 7: Train Meta-Model
    if not args.skip_history:
        total_steps += 1

        # Clean old meta-models
        print("\nüóëÔ∏è  –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö meta-–º–æ–¥–µ–ª–µ–π...")
        for f in glob.glob("models/meta_model_*.joblib"):
            os.remove(f)
            print(f"   –í–∏–¥–∞–ª–µ–Ω–æ: {f}")

        meta_cmd = [sys.executable, "train_meta_model.py", "--dataset", "meta_dataset.csv"]

        if args.meta_ensemble:
            meta_cmd.append("--ensemble")
            description = "–ö–†–û–ö 7: –ù–∞–≤—á–∞–Ω–Ω—è META-ENSEMBLE (LightGBM + XGBoost)"
        else:
            description = "–ö–†–û–ö 7: –ù–∞–≤—á–∞–Ω–Ω—è LightGBM meta-–º–æ–¥–µ–ª—ñ"

        if args.cv_folds > 0:
            meta_cmd.extend(["--cv-folds", str(args.cv_folds)])
            description += f" –∑ {args.cv_folds}-fold CV"

        if run_cmd(meta_cmd, description):
            success_count += 1

    # STEP 8: Generate Meta-Signals
    if not args.skip_history:
        total_steps += 1
        if run_cmd(
            [sys.executable, "infer_meta_signals.py", "--config", config_file],
            "–ö–†–û–ö 8: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ—ñ–Ω–∞–ª—å–Ω–∏—Ö meta-—Å–∏–≥–Ω–∞–ª—ñ–≤"
        ):
            success_count += 1

    # STEP 9: Evaluate with Financial Metrics
    if not args.skip_history:
        total_steps += 1
        if run_cmd(
            [sys.executable, "evaluate_backtest.py", "--history-dir", "outputs/history", "--initial-balance", "10000"],
            "–ö–†–û–ö 9: –û—Ü—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"
        ):
            success_count += 1

    # Final Summary
    print("\n" + "="*80)
    print("üìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ö–û–ù–ê–ù–ù–Ø PIPELINE")
    print("="*80)
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ: {success_count}/{total_steps} –∫—Ä–æ–∫—ñ–≤")
    print(f"‚è±Ô∏è  –ß–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    if success_count == total_steps:
        print("\nüéâ –í–°–Ü –ö–†–û–ö–ò –í–ò–ö–û–ù–ê–ù–û –£–°–ü–Ü–®–ù–û!")
        print("\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
        print("   - –ú–æ–¥–µ–ª—ñ: models/")
        print("   - –°–∏–≥–Ω–∞–ª–∏: outputs/signals.json")
        if not args.skip_history:
            print("   - Meta-—Å–∏–≥–Ω–∞–ª–∏: outputs/meta_signal.json")
            print("   - Backtest –∑–≤—ñ—Ç: outputs/backtest_report.json")
            print("   - –Ü—Å—Ç–æ—Ä—ñ—è: outputs/history/")

        print("\nüåê –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–∞—à–±–æ—Ä–¥—É –∑–∞–ø—É—Å—Ç—ñ—Ç—å:")
        print("   codex run web")
        print("   –∞–±–æ")
        print("   uvicorn scripts.web_server:app --host 0.0.0.0 --port 8000")
    else:
        print(f"\n‚ö†Ô∏è  –ó–ê–í–ï–†–®–ï–ù–û –ó –ü–û–ú–ò–õ–ö–ê–ú–ò: {total_steps - success_count} –∫—Ä–æ–∫—ñ–≤ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ")
        sys.exit(1)

    print("="*80 + "\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Pipeline –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
